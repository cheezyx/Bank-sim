-- MySQL Script generated by MySQL Workbench
-- Tue Dec  5 13:14:10 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bankdatabase
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bankdatabase
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bankdatabase` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `bankdatabase` ;

-- -----------------------------------------------------
-- Table `bankdatabase`.`accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdatabase`.`accounts` (
  `account_id` INT(11) NOT NULL AUTO_INCREMENT,
  `balance` DECIMAL(20,2) NOT NULL DEFAULT '0.00',
  `account_type` ENUM('debit', 'credit') NOT NULL,
  `credit_limit` DECIMAL(20,2) NULL DEFAULT NULL,
  PRIMARY KEY (`account_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankdatabase`.`customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdatabase`.`customers` (
  `customer_id` INT(11) NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`customer_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankdatabase`.`account_privileges`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdatabase`.`account_privileges` (
  `account_privilege_id` INT(11) NOT NULL AUTO_INCREMENT,
  `account_id` INT(11) NOT NULL,
  `customer_id` INT(11) NOT NULL,
  `access_level` ENUM('owner', 'authorized_user') NOT NULL,
  PRIMARY KEY (`account_privilege_id`),
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  INDEX `customer_id` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `account_privileges_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankdatabase`.`accounts` (`account_id`)
    ON UPDATE CASCADE,
  CONSTRAINT `account_privileges_ibfk_2`
    FOREIGN KEY (`customer_id`)
    REFERENCES `bankdatabase`.`customers` (`customer_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankdatabase`.`cards`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdatabase`.`cards` (
  `card_id` INT(11) NOT NULL AUTO_INCREMENT,
  `customer_id` INT(11) NOT NULL,
  `card_type` ENUM('debit', 'credit', 'dual') NOT NULL,
  `pin_hashed` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`card_id`),
  INDEX `cards_ibfk_1` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `cards_fk1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `bankdatabase`.`customers` (`customer_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankdatabase`.`card_privileges`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdatabase`.`card_privileges` (
  `card_id` INT(11) NOT NULL,
  `account_id` INT(11) NOT NULL,
  PRIMARY KEY (`card_id`, `account_id`),
  INDEX `card_privileges_ibfk_2` (`account_id` ASC) VISIBLE,
  CONSTRAINT `card_privileges_ibfk_1`
    FOREIGN KEY (`card_id`)
    REFERENCES `bankdatabase`.`cards` (`card_id`)
    ON UPDATE CASCADE,
  CONSTRAINT `card_privileges_ibfk_2`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankdatabase`.`accounts` (`account_id`)
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankdatabase`.`transactions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdatabase`.`transactions` (
  `transaction_id` INT(11) NOT NULL AUTO_INCREMENT,
  `from_account_id` INT(11) NULL DEFAULT NULL,
  `to_account_id` INT(11) NULL DEFAULT NULL,
  `amount` DECIMAL(20,2) NOT NULL,
  `date_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `description` VARCHAR(255) NULL DEFAULT NULL,
  `transaction_type` ENUM('transfer', 'deposit', 'withdraw') NULL DEFAULT NULL,
  PRIMARY KEY (`transaction_id`),
  INDEX `transactions_ibfk_1` (`from_account_id` ASC) VISIBLE,
  INDEX `transactions_ibfk_2` (`to_account_id` ASC) VISIBLE,
  CONSTRAINT `transactions_ibfk_1`
    FOREIGN KEY (`from_account_id`)
    REFERENCES `bankdatabase`.`accounts` (`account_id`)
    ON UPDATE CASCADE,
  CONSTRAINT `transactions_ibfk_2`
    FOREIGN KEY (`to_account_id`)
    REFERENCES `bankdatabase`.`accounts` (`account_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `bankdatabase` ;

-- -----------------------------------------------------
-- procedure AddCardAndLinkAccount
-- -----------------------------------------------------

DELIMITER $$
USE `bankdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddCardAndLinkAccount`(
    IN new_customer_id INT,
    IN new_card_type ENUM('debit', 'credit', 'dual'),
    IN new_pin_hashed VARCHAR(255),
    IN account1_id INT,
    IN account2_id INT
)
BEGIN
    DECLARE account1_exists INT;
    DECLARE account2_exists INT;
    DECLARE account1_type VARCHAR(10);
    DECLARE account2_type VARCHAR(10);
    DECLARE cardTypeMismatch BOOLEAN DEFAULT FALSE;

    -- Aloita transaktio
    START TRANSACTION;

    -- Tarkista, että annetut tilit ovat olemassa
    SELECT COUNT(*) INTO account1_exists FROM accounts WHERE account_id = account1_id;
    IF account2_id IS NOT NULL THEN
        SELECT COUNT(*) INTO account2_exists FROM accounts WHERE account_id = account2_id;
    ELSE
        SET account2_exists = 1; -- Aseta oletusarvo, jos account2_id:tä ei ole annettu
    END IF;

    IF (account1_exists = 0 OR account2_exists = 0) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'One or more accounts do not exist';
        ROLLBACK;
    ELSE
        -- Hae tilien tyypit
        SELECT account_type INTO account1_type FROM accounts WHERE account_id = account1_id;
        IF account2_id IS NOT NULL THEN
            SELECT account_type INTO account2_type FROM accounts WHERE account_id = account2_id;
        END IF;

        -- Tarkista kortin ja tilien yhteensopivuus
        IF new_card_type IN ('debit', 'credit') AND (account2_id IS NOT NULL OR account1_type != new_card_type) THEN
            SET cardTypeMismatch = TRUE;
        END IF;

        IF new_card_type = 'dual' AND (account1_type = account2_type) THEN
            SET cardTypeMismatch = TRUE;
        END IF;

        IF cardTypeMismatch THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Card type and account types mismatch or incorrect number of accounts';
            ROLLBACK;
        ELSE
            -- Lisää kortti
            INSERT INTO cards (customer_id, card_type, pin_hashed) VALUES (new_customer_id, new_card_type, new_pin_hashed);
            SET @new_card_id = LAST_INSERT_ID();

            -- Linkitä ensimmäinen tili korttiin
            INSERT INTO card_privileges (card_id, account_id) VALUES (@new_card_id, account1_id);

            -- Linkitä toinen tili korttiin, jos dual-kortti ja toinen tili määritelty
            IF new_card_type = 'dual' AND account2_id IS NOT NULL THEN
                INSERT INTO card_privileges (card_id, account_id) VALUES (@new_card_id, account2_id);
            END IF;

            -- Jos kaikki meni hyvin, vahvista transaktio
            COMMIT;
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DepositBalance
-- -----------------------------------------------------

DELIMITER $$
USE `bankdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DepositBalance`(
    IN p_account_id INT,
    IN p_amount DECIMAL(10, 2),
    OUT p_message TEXT
)
BEGIN
    -- Aloita transaktio
    START TRANSACTION;

    -- Päivitä tili
    UPDATE accounts SET balance = balance + p_amount WHERE account_id = p_account_id;

    -- Kirjaa transaktio
    INSERT INTO transactions (from_account_id, to_account_id, amount, date_time, description, transaction_type)
    VALUES (NULL, p_account_id, p_amount, NOW(), 'Talletus', 'deposit'); 

    -- Jos kaikki meni hyvin, vahvista transaktio
    SET p_message = 'Talletus onnistui';
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure TransferBalance
-- -----------------------------------------------------

DELIMITER $$
USE `bankdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `TransferBalance`(
    IN p_from_account_id INT,
    IN p_to_account_id INT,
    IN p_amount DECIMAL(10, 2),
    IN p_description VARCHAR(255),
    OUT p_message TEXT
)
BEGIN
    DECLARE v_from_balance DECIMAL(10, 2);
    DECLARE v_from_account_type ENUM('debit', 'credit');
    DECLARE v_from_credit_limit DECIMAL(10, 2);

    START TRANSACTION;

    -- Hae tilin saldo, tyyppi ja luottoraja
    SELECT balance, account_type, credit_limit INTO v_from_balance, v_from_account_type, v_from_credit_limit
    FROM accounts WHERE account_id = p_from_account_id FOR UPDATE;

    -- Tarkista tilin tyyppi ja varojen riittävyys
    IF v_from_account_type = 'credit' THEN
        -- Credit-tilin tarkistus
        IF v_from_balance - p_amount < -v_from_credit_limit THEN
            SET p_message = 'Luottoraja ylitetty';
            ROLLBACK;
        ELSE
            -- Päivitä saldot ja kirjaa siirto
            UPDATE accounts SET balance = balance - p_amount WHERE account_id = p_from_account_id;
            UPDATE accounts SET balance = balance + p_amount WHERE account_id = p_to_account_id;
            INSERT INTO transactions (from_account_id, to_account_id, amount, date_time, description, transaction_type)
            VALUES (p_from_account_id, p_to_account_id, p_amount, NOW(), p_description, 'transfer');
            SET p_message = 'Siirto onnistui';
            COMMIT;
        END IF;
    ELSEIF v_from_account_type = 'debit' THEN
        -- Debit-tilin tarkistus
        IF v_from_balance - p_amount < 0 THEN
            SET p_message = 'Tilillä ei katetta';
            ROLLBACK;
        ELSE
            -- Päivitä saldot ja kirjaa siirto
            UPDATE accounts SET balance = balance - p_amount WHERE account_id = p_from_account_id;
            UPDATE accounts SET balance = balance + p_amount WHERE account_id = p_to_account_id;
            INSERT INTO transactions (from_account_id, to_account_id, amount, date_time, description, transaction_type)
            VALUES (p_from_account_id, p_to_account_id, p_amount, NOW(), p_description, 'transfer');
            SET p_message = 'Siirto onnistui';
            COMMIT;
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure WithdrawBalance
-- -----------------------------------------------------

DELIMITER $$
USE `bankdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `WithdrawBalance`(
    IN p_account_id INT,
    IN p_amount DECIMAL(10, 2),
    OUT p_message TEXT
)
BEGIN
    DECLARE v_balance DECIMAL(10, 2);
    DECLARE v_account_type ENUM('debit', 'credit');
    DECLARE v_credit_limit DECIMAL(10, 2);

    -- Aloita transaktio
    START TRANSACTION;
    
    -- Tarkista, että summa on jaollinen luvulla 10
    IF p_amount % 10 != 0 THEN
        SET p_message = 'Summan tulee olla jaollinen luvulla 10';
        ROLLBACK;
    ELSE
        -- Hae tilin saldo, tyyppi ja luottoraja
        SELECT balance, account_type, credit_limit INTO v_balance, v_account_type, v_credit_limit
        FROM accounts WHERE account_id = p_account_id FOR UPDATE;
        
        -- Tarkista onko tilillä tarpeeksi varoja tai onko se luottotili
        IF v_account_type = 'credit' AND v_balance - p_amount < -v_credit_limit THEN
            SET p_message = 'Luottoraja ylitetty';
            ROLLBACK;
        ELSEIF v_account_type = 'debit' AND v_balance < p_amount THEN
            SET p_message = 'Tilillä ei katetta';
            ROLLBACK;
        ELSE
            -- Vähennä summa tililtä
            UPDATE accounts SET balance = balance - p_amount WHERE account_id = p_account_id;

            -- Kirjaa transaktio
            INSERT INTO transactions (from_account_id, to_account_id, amount, date_time, description, transaction_type)
            VALUES (p_account_id, NULL, p_amount, NOW(), 'Nosto', 'withdraw'); 

            SET p_message = 'Nosto onnistui';
            COMMIT;
        END IF;
    END IF;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
